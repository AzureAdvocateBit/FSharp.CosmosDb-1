name: Release package to NuGet

env:
  OUTPUT_PATH: ${{ github.workspace }}/.output
  DOTNET_VERSION: "3.1.100"

on:
  issues:
    types: [labeled]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Prepare create release issue action
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Building Action
        run: npm i && npm run build
        working-directory: ./.github/actions/check-issue

      - name: Check issue was release issue
        uses: ./.github/actions/check-issue
        id: check-issue
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          label: release-candidate

      - name: Building Action
        run: npm i && npm run build
        if: steps.check-issue.exists == 'true'
        working-directory: ./.github/actions/get-action-id

      - name: Get the ID of the Action
        uses: ./.github/actions/get-action-id
        if: steps.check-issue.exists == 'true'
        id: action-id
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download packages
        if: steps.check-issue.exists == 'true'
        run: |
          echo ${{ steps.get-action-id.id }}

      - name: Get release version
        if: steps.check-issue.exists == 'true'
        run: |
          version=(cat ${{ env.OUTPUT_PATH }}/version.txt)
          echo "::set-env name=package_version::$version"
      # - name: Setup Dotnet ${{ env.DOTNET_VERSION }}
      #   uses: actions/setup-dotnet@v1
      #   if: steps.check-issue.exists == 'true'
      #   with:
      #     dotnet-version: ${{ env.DOTNET_VERSION }}
      # - name: Push NuGet Package
      #   if: steps.check-issue.exists == 'true'
      #   run: |
      #     dotnet nuget push FSharp.CosmosDb.${{ env.package_version }}.nupkg --key ${{ secrets.NUGET_KEY }}
      #     dotnet nuget push FSharp.CosmosDb.Analyzer.${{ env.package_version }}.nupkg --key ${{ secrets.NUGET_KEY }}
